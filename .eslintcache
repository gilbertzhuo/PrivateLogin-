[{"C:\\Users\\Senpai\\Desktop\\Boiler Template\\frontend\\test\\src\\index.js":"1","C:\\Users\\Senpai\\Desktop\\Boiler Template\\frontend\\test\\src\\App.js":"2","C:\\Users\\Senpai\\Desktop\\Boiler Template\\frontend\\test\\src\\components\\login.jsx":"3","C:\\Users\\Senpai\\Desktop\\Boiler Template\\frontend\\test\\src\\components\\form.jsx":"4"},{"size":197,"mtime":1606866001144,"results":"5","hashOfConfig":"6"},{"size":367,"mtime":1607313155920,"results":"7","hashOfConfig":"6"},{"size":2298,"mtime":1607313552676,"results":"8","hashOfConfig":"6"},{"size":8150,"mtime":1607313507546,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1pdicnu",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Senpai\\Desktop\\Boiler Template\\frontend\\test\\src\\index.js",[],["19","20"],"C:\\Users\\Senpai\\Desktop\\Boiler Template\\frontend\\test\\src\\App.js",["21"],"C:\\Users\\Senpai\\Desktop\\Boiler Template\\frontend\\test\\src\\components\\login.jsx",["22"],"C:\\Users\\Senpai\\Desktop\\Boiler Template\\frontend\\test\\src\\components\\form.jsx",[],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":9,"column":12,"nodeType":"29","endLine":9,"endColumn":40},{"ruleId":"30","severity":1,"message":"31","line":10,"column":18,"nodeType":"32","messageId":"33","endLine":10,"endColumn":20},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"react-hooks/exhaustive-deps","Assignments to the 'auth' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]